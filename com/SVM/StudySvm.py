"""
Created on Nov 4, 2010
Update on 2017-03-21
Chapter 5 source file for Machine Learing in Action
@author: Peter/geekidentity
"""
from numpy import *
import pylab
from time import sleep

def main():
    dataArr, labelArr = loadDataSet('testSet.txt')
    smoSimple(dataArr, labelArr, 0.6, 0.001, 40)

def loadDataSet(fileName):
   """
   对文件进行逐行解析，从而得到第行的类标签和整个数据矩阵
   Args:
       fileName: testSet.txt
   Returns:
       数据矩阵, 类标签
   """
   dataMat = []; labelMat = []
   fr = open(fileName)
   for line in fr.readlines():
       lineArr = line.strip().split('\t')
       dataMat.append([float(lineArr[0]), float(lineArr[1])])
       labelMat.append(float(lineArr[2]))
   return dataMat,labelMat

def selectJrand(i,m):
   """
   随机选择一个整数
   Args:
       i: 第一个alpha的下标
       m: 所有alpha的数目
   Returns:
   """
   j=i #we want to select any J not equal to i
   while (j==i):
       j = int(random.uniform(0,m))
   return j

def clipAlpha(aj,H,L):
   """
   用于调整大于H或小于L的alpha值
   Args:
       aj:
       H:
       L:
   Returns:
   """
   if aj > H:
       aj = H
   if L > aj:
       aj = L
   return aj

def smoSimple(dataMatIn, classLabels, C, toler, maxIter):
   """
   SVM SMO算法的简单实现:
       创建一个alpha向量并将其初始化为0向量
       当迭代次数据小于最大迭代次数时(外循环)
           对数据集中的每个数据向量(内循环):
              如果该数据向量可以被优化:
                  随机选择另外一个数据向量
                  同时优化这两个向量
                  如果两个向量都不能被优化，退出内循环
           如果所有向量都没有被优化，增加迭代数目，继续下一次循环
   Args:
       dataMatIn: 数据集
       classLabels: 类别标签
       C: 松弛变量，允许有些数据点可以处于分隔面的错误一侧。
           控制最大化间隔和保证大部分的函数间隔小于1.0这两个目标的权重。
           可以通过调节该参数达到不同的结果。
       toler: 容错率
       maxIter: 退出前最大的循环次数
   Returns:
   """
   dataMatrix = mat(dataMatIn); labelMat = mat(classLabels).transpose()
   b = 0; m,n = shape(dataMatrix)
   alphas = mat(zeros((m,1)))
   iter = 0 # 没有任何alpha改变的情况下遍历数据的次数
   while (iter < maxIter):
#       w = calcWs(alphas, dataMatIn, classLabels)
#       print("w:", w)
       alphaPairsChanged = 0 #记录alpha是否已经进行优化，每次循环时设为0，然后再对整个集合顺序遍历
       for i in range(m):
           fXi = float(multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[i,:].T)) + b # 我们预测的类别
           Ei = fXi - float(labelMat[i])#检查是否违反KKT条件 误差：基于这个实例的预测结果和真实结果的比对，计算误差Ei 参考：http://blog.csdn.net/puqutogether/article/details/44587653
           if ((labelMat[i]*Ei < -toler) and (alphas[i] < C)) or ((labelMat[i]*Ei > toler) and (alphas[i] > 0)): #不管是正负间隔都会测试，同时检查alpha值，保证其不能等于0或C
              j = selectJrand(i,m) # 误差很大时进行优化
              fXj = float(multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[j,:].T)) + b
              Ej = fXj - float(labelMat[j])
              alphaIold = alphas[i].copy()
              alphaJold = alphas[j].copy()
              if (labelMat[i] != labelMat[j]): # 将alpha调整到0-C之间
                  L = max(0, alphas[j] - alphas[i])
                  H = min(C, C + alphas[j] - alphas[i])
              else:
                  L = max(0, alphas[j] + alphas[i] - C)
                  H = min(C, alphas[j] + alphas[i])
              if L==H: print("L==H"); continue
              eta = 2.0 * dataMatrix[i,:]*dataMatrix[j,:].T - dataMatrix[i,:]*dataMatrix[i,:].T - dataMatrix[j,:]*dataMatrix[j,:].T #最优修改量
              if eta >= 0: print("eta>=0"); continue # 如果ETA为0，那么计算新的alphas[j]就比较麻烦了
              alphas[j] -= labelMat[j]*(Ei - Ej)/eta
              alphas[j] = clipAlpha(alphas[j],H,L)
              # 检查alpha[j]是否有轻微的改变，如果是的话，就退出for循环。
              if (abs(alphas[j] - alphaJold) < 0.00001): print("j not moving enough"); continue
              # 对alpha[i], alpha[j]同样进行改变，改变方向一样
              alphas[i] += labelMat[j]*labelMat[i]*(alphaJold - alphas[j])#update i by the same amount as j
                                                                  #the update is in the oppostie direction
              # 在对alpha[i], alpha[j] 进行优化之后，给这两个alpha值设置一个常数b。
              b1 = b - Ei- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[i,:].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[i,:]*dataMatrix[j,:].T
              b2 = b - Ej- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[j,:].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[j,:]*dataMatrix[j,:].T
              if (0 < alphas[i]) and (C > alphas[i]): b = b1
              elif (0 < alphas[j]) and (C > alphas[j]): b = b2
              else: b = (b1 + b2)/2.0
              alphaPairsChanged += 1
              print("iter: %d i:%d, pairs changed %d" % (iter,i,alphaPairsChanged))
       # 在for循环外，检查alpha值是否做了更新，如果在更新则将iter设为0后继续运行程序
       if (alphaPairsChanged == 0): iter += 1
       else:iter = 0
       print("iteration number: %d" % iter)
   return b,alphas


def kernelTrans(X, A, kTup): # calc the kernel or transform data to a higher dimensional space
   """
   核转换函数
   Args:
       X:
       A:
       kTup: 核函数的信息
   Returns:
   """
   m, n = shape(X)
   K = mat(zeros((m, 1)))
   if kTup[0] == 'lin':
       K = X * A.T # linear kernel
   elif kTup[0] == 'rbf':
       for j in range(m):
           deltaRow = X[j, :] - A
           K[j] = deltaRow * deltaRow.T
       K = exp(K / (-1 * kTup[1] ** 2)) # divide in NumPy is element-wise not matrix like Matlab
   else:
       raise NameError('Houston We Have a Problem -- \
   That Kernel is not recognized')
   return K


class optStruct:
   """
   建立的数据结构来保存所有的重要值
   """
   def __init__(self, dataMatIn, classLabels, C, toler, kTup): # Initialize the structure with the parameters
       """
       Args:
           dataMatIn:
           classLabels:
           C:
           toler:
           kTup: 包含核函数信息的元组
       """
       self.X = dataMatIn
       self.labelMat = classLabels
       self.C = C
       self.tol = toler
       self.m = shape(dataMatIn)[0] # 数据的行数
       self.alphas = mat(zeros((self.m, 1)))
       self.b = 0
       self.eCache = mat(zeros((self.m, 2))) # 误差缓存，第一列给出的是eCache是否有效的标志位，第二列给出的是实际的E值。
       self.K = mat(zeros((self.m, self.m)))
       for i in range(self.m):
           self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)


def calcEk(oS, k):
   """
   计算E值并返回
   该过程在完整版的SMO算法中陪出现次数较多，因此将其单独作为一个方法
   Args:
       oS:
       k:
   Returns:
   """
   fXk = float(multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)
   Ek = fXk - float(oS.labelMat[k])
   return Ek


def selectJ(i, oS, Ei): # this is the second choice -heurstic, and calcs Ej
   """
   内循环的启发式方法。
   选择第二个(内循环)alpha的alpha值
   这里的目标是选择合适的第二个alpha值以保证每次优化中采用最大步长。
   该函数的误差与第一个alpha值Ei和下标i有关。
   Args:
       i:
       oS:
       Ei:
   Returns:
   """
   maxK = -1
   maxDeltaE = 0
   Ej = 0
   oS.eCache[i] = [1, Ei] # 首先将输入值Ei在缓存中设置成为有效的。这里的有效意味着它已经计算好了。
   validEcacheList = nonzero(oS.eCache[:, 0].A)[0] # 非零E值所对应的alpha值
   if (len(validEcacheList)) > 1:
       for k in validEcacheList: # 在所有的值上进行循环，并选择其中使得改变最大的那个值
           if k == i: continue # don't calc for i, waste of time
           Ek = calcEk(oS, k)
           deltaE = abs(Ei - Ek)
           if (deltaE > maxDeltaE):
              # 选择具有最大步长的j
              maxK = k
              maxDeltaE = deltaE
              Ej = Ek
       return maxK, Ej
   else: # 如果是第一次循环，则随机选择一个alpha值
       j = selectJrand(i, oS.m)
       Ej = calcEk(oS, j)
   return j, Ej


def updateEk(oS, k): # after any alpha has changed update the new value in the cache
   """
   计算误差值并存入缓存中。
   在对alpha值进行优化之后会用到这个值。
   Args:
       oS:
       k:
   Returns:
   """
   Ek = calcEk(oS, k)
   oS.eCache[k] = [1, Ek]


def innerL(i, oS):
   """
   内循环代码
   Args:
       i:
       oS:
   Returns:
   """
   Ei = calcEk(oS, i)
   if ((oS.labelMat[i] * Ei < -oS.tol) and (oS.alphas[i] < oS.C)) or (
       (oS.labelMat[i] * Ei > oS.tol) and (oS.alphas[i] > 0)):
       j, Ej = selectJ(i, oS, Ei) # this has been changed from selectJrand
       alphaIold = oS.alphas[i].copy()
       alphaJold = oS.alphas[j].copy()
       if (oS.labelMat[i] != oS.labelMat[j]):
           L = max(0, oS.alphas[j] - oS.alphas[i])
           H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])
       else:
           L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)
           H = min(oS.C, oS.alphas[j] + oS.alphas[i])
       if L == H:
           print("L==H")
           return 0
       eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j] # changed for kernel
       if eta >= 0:
           print("eta>=0")
           return 0
       oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta
       oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)
       updateEk(oS, j) # 更新误差缓存
       if (abs(oS.alphas[j] - alphaJold) < 0.00001):
           print("j not moving enough")
           return 0
       oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j]) # update i by the same amount as j
       updateEk(oS, i) # 更新误差缓存                  #the update is in the oppostie direction
       b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (
       oS.alphas[j] - alphaJold) * oS.K[i, j]
       b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (
       oS.alphas[j] - alphaJold) * oS.K[j, j]
       if (0 < oS.alphas[i]) and (oS.C > oS.alphas[i]):
           oS.b = b1
       elif (0 < oS.alphas[j]) and (oS.C > oS.alphas[j]):
           oS.b = b2
       else:
           oS.b = (b1 + b2) / 2.0
       return 1
   else:
       return 0


def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):
   """
   完整SMO算法外循环，与smoSimple有些类似，但这里的循环退出条件更多一些
   Args:
       dataMatIn:
       classLabels:
       C:
       toler:
       maxIter:
       kTup:
   Returns:
   """
   oS = optStruct(mat(dataMatIn), mat(classLabels).transpose(), C, toler, kTup)
   iter = 0
   entireSet = True
   alphaPairsChanged = 0
   while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)):
       alphaPairsChanged = 0
       if entireSet: # 在数据集上遍历所有可能的alpha
           for i in range(oS.m):
               alphaPairsChanged += innerL(i, oS)
               print("fullSet, iter: %d i:%d, pairs changed %d" % (iter, i, alphaPairsChanged))
           iter += 1
       else: # 遍历所有的非边界alpha值，也就是不在边界0或C上的值。
           nonBoundIs = nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]
           for i in nonBoundIs:
               alphaPairsChanged += innerL(i, oS)
               print("non-bound, iter: %d i:%d, pairs changed %d" % (iter, i, alphaPairsChanged))
           iter += 1
       if entireSet:
           entireSet = False # toggle entire set loop
       elif (alphaPairsChanged == 0):
           entireSet = True
       print("iteration number: %d" % iter)
   return oS.b, oS.alphas


def calcWs(alphas, dataArr, classLabels):
   """
   基于alpha计算w值
   Args:
       alphas:
       dataArr:
       classLabels:
   Returns:
   """
   X = mat(dataArr)
   labelMat = mat(classLabels).transpose()
   m, n = shape(X)
   w = zeros((n, 1))
   for i in range(m):
       w += multiply(alphas[i] * labelMat[i], X[i, :].T)
   return w


def testRbf(k1=1.3):
   dataArr, labelArr = loadDataSet('testSetRBF.txt')
   b, alphas = smoP(dataArr, labelArr, 200, 0.0001, 10000, ('rbf', k1)) # C=200 important
   datMat = mat(dataArr)
   labelMat = mat(labelArr).transpose()
   svInd = nonzero(alphas.A > 0)[0]
   sVs = datMat[svInd] # get matrix of only support vectors
   labelSV = labelMat[svInd]
   print("there are %d Support Vectors" % shape(sVs)[0])
   m, n = shape(datMat)
   errorCount = 0
   for i in range(m):
       kernelEval = kernelTrans(sVs, datMat[i, :], ('rbf', k1))
       predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b
       if sign(predict) != sign(labelArr[i]): errorCount += 1
   print("the training error rate is: %f" % (float(errorCount) / m))
   dataArr, labelArr = loadDataSet('testSetRBF2.txt')
   errorCount = 0
   datMat = mat(dataArr)
   labelMat = mat(labelArr).transpose()
   m, n = shape(datMat)
   for i in range(m):
       kernelEval = kernelTrans(sVs, datMat[i, :], ('rbf', k1))
       predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b
       if sign(predict) != sign(labelArr[i]): errorCount += 1
   print("the test error rate is: %f" % (float(errorCount) / m))


def img2vector(filename):
   returnVect = zeros((1, 1024))
   fr = open(filename)
   for i in range(32):
       lineStr = fr.readline()
       for j in range(32):
           returnVect[0, 32 * i + j] = int(lineStr[j])
   return returnVect


def loadImages(dirName):
   from os import listdir
   hwLabels = []
   print(dirName)
   trainingFileList = listdir(dirName) # load the training set
   m = len(trainingFileList)
   trainingMat = zeros((m, 1024))
   for i in range(m):
       fileNameStr = trainingFileList[i]
       fileStr = fileNameStr.split('.')[0] # take off .txt
       classNumStr = int(fileStr.split('_')[0])
       if classNumStr == 9:
           hwLabels.append(-1)
       else:
           hwLabels.append(1)
       trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))
   return trainingMat, hwLabels


def testDigits(kTup=('rbf', 10)):
   dataArr, labelArr = loadImages('trainingDigits')
   b, alphas = smoP(dataArr, labelArr, 200, 0.0001, 10000, kTup)
   datMat = mat(dataArr)
   labelMat = mat(labelArr).transpose()
   svInd = nonzero(alphas.A > 0)[0]
   sVs = datMat[svInd]
   labelSV = labelMat[svInd]
   print("there are %d Support Vectors" % shape(sVs)[0])
   m, n = shape(datMat)
   errorCount = 0
   for i in range(m):
       kernelEval = kernelTrans(sVs, datMat[i, :], kTup)
       predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b
       if sign(predict) != sign(labelArr[i]): errorCount += 1
   print("the training error rate is: %f" % (float(errorCount) / m))
   dataArr, labelArr = loadImages('testDigits')
   errorCount = 0
   datMat = mat(dataArr)
   labelMat = mat(labelArr).transpose()
   m, n = shape(datMat)
   for i in range(m):
       kernelEval = kernelTrans(sVs, datMat[i, :], kTup)
       predict = kernelEval.T * multiply(labelSV, alphas[svInd]) + b
       if sign(predict) != sign(labelArr[i]): errorCount += 1
   print("the test error rate is: %f" % (float(errorCount) / m))


'''#######********************************
Non-Kernel VErsions below
''' #######********************************


class optStructK:
   def __init__(self, dataMatIn, classLabels, C, toler): # Initialize the structure with the parameters
       self.X = dataMatIn
       self.labelMat = classLabels
       self.C = C
       self.tol = toler
       self.m = shape(dataMatIn)[0]
       self.alphas = mat(zeros((self.m, 1)))
       self.b = 0
       self.eCache = mat(zeros((self.m, 2))) # first column is valid flag


def calcEkK(oS, k):
   fXk = float(multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k, :].T)) + oS.b
   Ek = fXk - float(oS.labelMat[k])
   return Ek


def selectJK(i, oS, Ei): # this is the second choice -heurstic, and calcs Ej
   maxK = -1
   maxDeltaE = 0
   Ej = 0
   oS.eCache[i] = [1, Ei] # set valid #choose the alpha that gives the maximum delta E
   validEcacheList = nonzero(oS.eCache[:, 0].A)[0]
   if (len(validEcacheList)) > 1:
       for k in validEcacheList: # loop through valid Ecache values and find the one that maximizes delta E
           if k == i: continue # don't calc for i, waste of time
           Ek = calcEk(oS, k)
           deltaE = abs(Ei - Ek)
           if (deltaE > maxDeltaE):
               maxK = k
               maxDeltaE = deltaE
               Ej = Ek
       return maxK, Ej
   else: # in this case (first time around) we don't have any valid eCache values
       j = selectJrand(i, oS.m)
       Ej = calcEk(oS, j)
   return j, Ej


def updateEkK(oS, k): # after any alpha has changed update the new value in the cache
   Ek = calcEk(oS, k)
   oS.eCache[k] = [1, Ek]


def innerLK(i, oS):
   Ei = calcEk(oS, i)
   if ((oS.labelMat[i] * Ei < -oS.tol) and (oS.alphas[i] < oS.C)) or (
       (oS.labelMat[i] * Ei > oS.tol) and (oS.alphas[i] > 0)):
       j, Ej = selectJ(i, oS, Ei) # this has been changed from selectJrand
       alphaIold = oS.alphas[i].copy()
       alphaJold = oS.alphas[j].copy()
       if (oS.labelMat[i] != oS.labelMat[j]):
           L = max(0, oS.alphas[j] - oS.alphas[i])
           H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])
       else:
           L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)
           H = min(oS.C, oS.alphas[j] + oS.alphas[i])
       if L == H:
           print("L==H")
           return 0
       eta = 2.0 * oS.X[i, :] * oS.X[j, :].T - oS.X[i, :] * oS.X[i, :].T - oS.X[j, :] * oS.X[j, :].T
       if eta >= 0:
           print("eta>=0")
           return 0
       oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta
       oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)
       updateEk(oS, j) # added this for the Ecache
       if (abs(oS.alphas[j] - alphaJold) < 0.00001):
           print("j not moving enough")
           return 0
       oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j]) # update i by the same amount as j
       updateEk(oS, i) # added this for the Ecache                  #the update is in the oppostie direction
       b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[i, :].T - oS.labelMat[j] * (
       oS.alphas[j] - alphaJold) * oS.X[i, :] * oS.X[j, :].T
       b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i, :] * oS.X[j, :].T - oS.labelMat[j] * (
       oS.alphas[j] - alphaJold) * oS.X[j, :] * oS.X[j, :].T
       if (0 < oS.alphas[i]) and (oS.C > oS.alphas[i]):
           oS.b = b1
       elif (0 < oS.alphas[j]) and (oS.C > oS.alphas[j]):
           oS.b = b2
       else:
           oS.b = (b1 + b2) / 2.0
       return 1
   else:
       return 0


def smoPK(dataMatIn, classLabels, C, toler, maxIter): # full Platt SMO
    oS = optStruct(mat(dataMatIn), mat(classLabels).transpose(), C, toler)
    iter = 0
    entireSet = True
    alphaPairsChanged = 0
    while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)):
        alphaPairsChanged = 0
        if entireSet: # go over all
            for i in range(oS.m):
                alphaPairsChanged += innerL(i, oS)
                print("fullSet, iter: %d i:%d, pairs changed %d" % (iter, i, alphaPairsChanged))
            iter += 1
        else: # go over non-bound (railed) alphas
            nonBoundIs = nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]
            for i in nonBoundIs:
                alphaPairsChanged += innerL(i, oS)
                print("non-bound, iter: %d i:%d, pairs changed %d" % (iter, i, alphaPairsChanged))
            iter += 1
            entireSet = False # toggle entire set loop
        elif alphaPairsChanged == 0:
            entireSet = True
        print("iteration number: %d" % iter)
    return oS.b, oS.alphas

if __name__ == "__main__":
   main()
